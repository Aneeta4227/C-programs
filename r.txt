#Exp No: 1
#Author: Aneeta Jose
#Program: Input from console

n<-as.integer(readline(prompt = "Enter a number: "))
print(paste("The inserted number is",n))

> source("~/Aneeta/console_input.R")
Enter a number: 5
[1] "The inserted number is 5"

#Exp No: 2
#Author: Aneeta Jose
#Program: Minimum and maximum

a = c(1, 2, 3, 4, 5)
print(paste("Largest number:",max(a)))
print(paste("Smallest number:",min(a)))

> source("~/Aneeta/minmax.R")
[1] "Largest number: 5"
[1] "Smallest number: 1"

#Exp No: 3
#Author: Aneeta Jose
#Program: Factorial and Palindrome

n <- as.integer(readline(prompt = "Enter a number:"))
fact = 1
for(i in 1:n)
  if(i!=0)
    fact <- fact*i
print(paste("The fcatorial of",n,"is:",fact))
num<-fact
r<-0
while(num>0)
{
  d<-num%%10
  r<-r*10+10
  num<-num%/%10
}
if(fact == r){
  print("The factorial is a palindrome.")
}else{
  print("The factorial is not a palindrome.")
}

> source("~/Aneeta/fact_palin.R")
Enter a number:5
[1] "The fcatorial of 5 is: 120"
[1] "The factorial is not a palindrome."

#Exp No: 4
#Author: Aneeta Jose
#Program: Multiples of five

n <- as.integer(readline(prompt = "Enter a number:"))
i <- 1
while(i*n <= 100)
{
  print(paste(i, "x", n, "=", i*n))
  i <- i+1
}


> source("~/Aneeta/five_multiples.R")
Enter a number:5
[1] "1 x 5 = 5"
[1] "2 x 5 = 10"
[1] "3 x 5 = 15"
[1] "4 x 5 = 20"
[1] "5 x 5 = 25"
[1] "6 x 5 = 30"
[1] "7 x 5 = 35"
[1] "8 x 5 = 40"
[1] "9 x 5 = 45"
[1] "10 x 5 = 50"
[1] "11 x 5 = 55"
[1] "12 x 5 = 60"
[1] "13 x 5 = 65"
[1] "14 x 5 = 70"
[1] "15 x 5 = 75"
[1] "16 x 5 = 80"
[1] "17 x 5 = 85"
[1] "18 x 5 = 90"
[1] "19 x 5 = 95"
[1] "20 x 5 = 100"


#Exp No: 5
#Author: Aneeta Jose
#Program: Pascal's Triangle

n <- as.integer(readline(prompt = "Enter the number of rows:"))
for (line in 1:n) 
{
  c = 1
  cat(rep(" ",n-line))
  for (e in 1:line) 
  {
    cat(c, " ")
    c = c*(line-e)/e
  }
  cat("\n")
}

> source("~/Aneeta/pascals_triangle.R")
Enter the number of rows:5
       1  
     1  1  
   1  2  1  
 1  3  3  1  
1  4  6  4  1  


#Exp No: 6
#Author: Aneeta Jose
#Program: Insert into a vector

v = c(24, 56, 57)
print("Original vector:")
print(v)
v = c(v[1], 23, v[2:length(v)])
print("Vector after inserting element at second position:")
print(v)


> source("~/Aneeta/vector.R")
[1] "Original vector:"
[1] 24 56 57
[1] "Vector after inserting element at second position:"
[1] 24 23 56 57


#Exp No: 7
#Author: Aneeta Jose
#Program: N-th element in a vector

my_vector <- c(1:10)
val <- c()
n <- as.integer(readline(prompt = "Entewr the value of n:"))
c <- n
i <- 1
while(n <= length(my_vector))
{
  val[i] <- my_vector[n]
  n <- n+c
  i <- i+1
}
cat("Original vector:", my_vector,"\n")
cat("Every", c, "-th element:", val, "\n")

> source("~/Aneeta/nth_element.R")
Entewr the value of n:3
Original vector: 1 2 3 4 5 6 7 8 9 10 
Every 3 -th element: 3 6 9 

#Exp No: 8
#Author: Aneeta Jose
#Program: N-th largest element in a vector

vector <- c(17, 3, 35, 88, 42, 33, 2, 6, 12, 50)
nums <- length(vector)
sorted <- sort(vector, decreasing = TRUE)
cat("The sorted vector:",sorted,"\n")
n <- as.integer(readline(prompt = "Enter the value of n:"))
cat(n,"-th largest element is:",sorted[n],"\n")

> source("~/Aneeta/nth_largest.R")
The sorted vector: 88 50 42 35 33 17 12 6 3 2 
Enter the value of n:4
4 -th largest element is: 35 

#Exp No: 9
#Author: Aneeta Jose
#Program: Binding vectors

vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)
row_binding <- rbind(vector1, vector2)
print("Row-wise binding:")
print(row_binding)
column_binding <- cbind(vector1, vector2)
print("Column-wise binding:")
print(column_binding)

> source("~/Aneeta/binding.R")
[1] "Row-wise binding:"
        [,1] [,2] [,3]
vector1    1    2    3
vector2    4    5    6
[1] "Column-wise binding:"
     vector1 vector2
[1,]       1       4
[2,]       2       5
[3,]       3       6


#Exp No: 10
#Author: Aneeta Jose
#Program: Merging two dataframes

df1 <- data.frame( ID = c(1, 2, 3, 4),
                 Name = c("Ramesh", "Suresh", "Mahesh", "Sumesh"))
df2 <- data.frame( ID = c(2, 3, 4),
                 Age = c(25, 30, 22))
print("Dataframe 1:\n")
print(df1)
print("Dataframe 2:\n")
print(df2)
merged <-merge(df1, df2, by = "ID")
print("Merged Dataframe:\n")
print(merged)

> source("~/Aneeta/merge_df.R")
[1] "Dataframe 1:\n"
  ID   Name
1  1 Ramesh
2  2 Suresh
3  3 Mahesh
4  4 Sumesh
[1] "Dataframe 2:\n"
  ID Age
1  2  25
2  3  30
3  4  22
[1] "Merged Dataframe:\n"
  ID   Name Age
1  2 Suresh  25
2  3 Mahesh  30
3  4 Sumesh  22

#Exp No: 11
#Author: Aneeta Jose
#Program: Transforming dataframe

my_df <- data.frame(ID = c(1, 2, 3, 4),
                    Name = c("Ramesh", "Suresh", "Mahesh", "Sumesh"),
                    Age = c(20, 21, 22, 23))
print("Original Dataframe:")
print(my_df)
my_df$Age <- my_df$Age + 5
print("Transformed Dataframe:")
print(my_df)

> source("~/Aneeta/transform.R")
[1] "Original Dataframe:"
  ID   Name Age
1  1 Ramesh  20
2  2 Suresh  21
3  3 Mahesh  22
4  4 Sumesh  23
[1] "Transformed Dataframe:"
  ID   Name Age
1  1 Ramesh  25
2  2 Suresh  26
3  3 Mahesh  27
4  4 Sumesh  28

#Exp No: 12
#Author: Aneeta Jose
#Program: Apply, Lapply, Sapply, Tapply

x = c(1, 2, 3, 4)
y = c(10,11,12,13)
m=data.frame(x,y)
print(m)
cat("\nApply:\n")
print(apply(m,1,sum))
cat("\nLapply:\n")
print(lapply(m,max))
cat("\nSapply:\n")
print(sapply(m,mean))
cat("\nTapply:\n")
print(tapply(x,y,sum))

> source("~/Aneeta/apply_fns.R")
  x  y
1 1 10
2 2 11
3 3 12
4 4 13

Apply:
[1] 11 13 15 17

Lapply:
$x
[1] 4

$y
[1] 13


Sapply:
   x    y 
 2.5 11.5 

Tapply:
10 11 12 13 
 1  2  3  4 

#Exp No: 13
#Author: Aneeta Jose
#Program: Linear Regression

data(mtcars)
print(str(mtcars))
model <- lm(mpg ~ wt, data = mtcars)
plot(mtcars$wt, mtcars$mpg, main = "Simple Linear Regression", xlab = "Weight", ylab = "MPG", pch = 19)
abline(model, col ="red")

> source("~/Aneeta/lin_reg.R")
'data.frame':	32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
NULL

#Exp No: 14
#Author: Aneeta Jose
#Program: Logistic Regression

library(ggplot2)
data(mtcars)
print(str(mtcars))
model <- glm(vs ~ mpg, data = mtcars, family = binomial)
mtcars$predicted_prob <-predict(model, type ="response")
print(summary(model))
plt <- ggplot(mtcars, aes(x = mpg, y = predicted_prob)) + 
  geom_point() + geom_smooth(method = "glm") + 
  labs(x = "mpg", y = "Fitted probability")
print(plt)

#Exp No: 15
#Author: Aneeta Jose
#Program: Decision Tree

library(rpart)
library(rpart.plot)
data("iris")
tree <- rpart(Species ~ ., data = iris, method = "class")
rpart.plot(tree)

#Exp No: 16
#Author: Aneeta Jose
#Program: SVM

library(e1071)
data("iris")
model <- svm(Species ~ ., data = iris)
predictions <- predict(model, iris)
confusion_matrix <- table(predictions, iris$Species)
print(confusion_matrix)
accuracy<-sum(diag(confusion_matrix))/sum(confusion_matrix)
cat("Accuracy:", accuracy)

> source("~/Aneeta/svm.R")
            
predictions  setosa versicolor virginica
  setosa         50          0         0
  versicolor      0         48         2
  virginica       0          2        48
Accuracy: 0.9733333


#Exp No: 17
#Author: Aneeta Jose
#Program: Variance, Covariance, Correlation

data("iris")
sample1 = iris$Sepal.Length
sample2 = iris$Petal.Length
cat("Variance :\n")
print(var(sample1, sample2))
cat("Covariance :\n")
print(cov(sample1, sample2))
cat("Correlation :\n")
print(cor(sample1, sample2))


> source("~/Aneeta/statistics.R")
Variance :
[1] 1.274315
Covariance :
[1] 1.274315
Correlation :
[1] 0.8717538

#Exp No: 18
#Author: Aneeta Jose
#Program: K-means clustering

library(cluster)
data(iris)
selected_data <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
k <- 3
kmeans_result <- kmeans(selected_data, centers = k)
cluster_assignments <- kmeans_result$cluster
print(kmeans_result$centers)
plot(selected_data[, c(1, 3)], col = cluster_assignments, main = "K-means Clustering (Iris Dataset)")
points(kmeans_result$centers[, c(1, 3)], col = 1:k, pch = 8, cex = 2)

> source("~/Aneeta/kmeans.R")
  Sepal.Length Sepal.Width Petal.Length Petal.Width
1     5.901613    2.748387     4.393548    1.433871
2     5.006000    3.428000     1.462000    0.246000
3     6.850000    3.073684     5.742105    2.071053


#Exp No: 19
#Author: Aneeta Jose
#Program: Hierarchical clustering

library(cluster)
data(mtcars)
selected_data <- mtcars[, c("mpg", "disp", "hp", "wt")]
hierarchical_result <- hclust(dist(selected_data), method = "complete")
plot(hierarchical_result, main = "Hierarchical Clustering Dendrogram", xlab = "Index", ylab = "Distance", sub = NULL)
num_clusters <- 3 
clusters <- cutree(hierarchical_result, k = num_clusters)
print(clusters)

> source("~/Aneeta/hierarchical.R")
          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive   Hornet Sportabout 
                  1                   1                   1                   2                   3 
            Valiant          Duster 360           Merc 240D            Merc 230            Merc 280 
                  2                   3                   1                   1                   1 
          Merc 280C          Merc 450SE          Merc 450SL         Merc 450SLC  Cadillac Fleetwood 
                  1                   2                   2                   2                   3 
Lincoln Continental   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla 
                  3                   3                   1                   1                   1 
      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28    Pontiac Firebird 
                  1                   2                   2                   3                   3 
          Fiat X1-9       Porsche 914-2        Lotus Europa      Ford Pantera L        Ferrari Dino 
                  1                   1                   1                   3                   1 
      Maserati Bora          Volvo 142E 
                  3                   1 
